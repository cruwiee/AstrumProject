import React, { useState, useContext } from "react";
import { useNavigate, Link } from "react-router-dom";
import CartContext from "../context/CartContext";
import "./LoginForm.css";
// import bcrypt from 'bcryptjs'; // ‚ùå –£–±–∏—Ä–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
// import useAuthRedirect from "../hooks/useAuthRedirect";

const LoginPage = () => {
  // useAuthRedirect(); // ‚ùå –û—Ç–∫–ª—é—á–∏–º –≤—Ä–µ–º–µ–Ω–Ω–æ, –µ—Å–ª–∏ –æ–Ω–æ –ª–æ–º–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É
  const navigate = useNavigate();
  const cartContext = useContext(CartContext) || {};
const { login } = cartContext;


  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
  if (!cartContext) {
    console.error("–û—à–∏–±–∫–∞: CartContext –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω!");
  }

  // const { login } = cartContext || {}; // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ `login`, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–∫–∏
  

  const [userData, setUserData] = useState({
    email: "",
    password: "",
  });

  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);

  const handleChange = (e) => {
    setUserData({ ...userData, [e.target.name]: e.target.value });
  };

  const handleLogin = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError("");
    

    try {
      const response = await fetch("http://localhost:5000/api/auth/login", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          FirstName: "–ò–º—è", // üëà –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–µ—Ä —Ç—Ä–µ–±—É–µ—Ç FirstName –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ
          Email: userData.email,
          Password: userData.password,
          PasswordHash: userData.password, 
        }),
      });

      const data = await response.json();
      console.log("–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data); // ‚úÖ –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

      if (!response.ok) {
        throw new Error(data.message || "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞");
      }

      localStorage.setItem("token", data.token);
      navigate("/profile");
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:", error);
      setError(error.message || "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="login-page">
      <div className="welcome-section">
        <h1>–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨!</h1>
      </div>
      <div className="login-container">
        <form className="auth-form" onSubmit={handleLogin}>
          <h2>–í–•–û–î</h2>
          <input
            className="login-input"
            type="email"
            name="email"
            placeholder="–ü–æ—á—Ç–∞"
            value={userData.email}
            onChange={handleChange}
            required
          />
          <input
            className="login-input"
            type="password"
            name="password"
            placeholder="–ü–∞—Ä–æ–ª—å"
            value={userData.password}
            onChange={handleChange}
            required
          />
          <button type="submit" disabled={loading}>
            {loading ? "–ó–∞–≥—Ä—É–∑–∫–∞..." : "–í–û–ô–¢–ò"}
          </button>
          {error && <p className="error">{error}</p>}
          <p className="register-link">
            –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? <Link to="/register">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</Link>
          </p>
        </form>
      </div>
    </div>
  );
};
export default LoginPage;


// import React, { useState, useContext } from "react";
// import { useNavigate, Link } from "react-router-dom";
// import CartContext from "../context/CartContext";
// import "./AuthForm.css";
// import bcrypt from 'bcryptjs';
// import useAuthRedirect from "../hooks/useAuthRedirect";

// const LoginPage = () => {
//   useAuthRedirect();
//   const navigate = useNavigate();
//   const { login } = useContext(CartContext);

//   const [userData, setUserData] = useState({
//     email: "",
//     password: "",
//   });

  

//   const [error, setError] = useState("");
//   const [loading, setLoading] = useState(false);

//   const handleChange = (e) => {
//     setUserData({ ...userData, [e.target.name]: e.target.value });
//   };

//   const handleLogin = async (e) => {
//     e.preventDefault();
//     setLoading(true);

//     try {
      
//       const response = await fetch("http://localhost:5000/api/auth/login", {
//         method: "POST",
//         headers: { "Content-Type": "application/json" },
//         body: JSON.stringify({
//           // FirstName: userData.email,
//           Email: userData.email,
//           Password: userData.password,  // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –û–±—ã—á–Ω—ã–π –ø–∞—Ä–æ–ª—å
         
//           // PasswordHash: userData.password  // –ò–∑–º–µ–Ω—è–µ–º "password" –Ω–∞ "passwordHash"
//         }),
//       });

//       const data = await response.json();

//       if (!response.ok) {
//         setError(data.message || "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞");
//       } else {
//         localStorage.setItem("token", data.token); // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
//         navigate("/profile"); // ‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å
//       }
//     } catch (error) {
//       setError("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
//     } finally {
//       setLoading(false);
//     }
//   };

//   return (
//     <form className="auth-form" onSubmit={handleLogin}>
//       <h2>–í—Ö–æ–¥</h2>
//       <input
//         type="email"
//         name="email"
//         placeholder="Email"
//         value={userData.email}
//         onChange={handleChange}
//         required
//       />
//       <input
//         type="password"
//         name="password"
//         placeholder="–ü–∞—Ä–æ–ª—å"
//         value={userData.password}
//         onChange={handleChange}
//         required
//       />
//       <button type="submit" disabled={loading}>
//         {loading ? "–ó–∞–≥—Ä—É–∑–∫–∞..." : "–í–æ–π—Ç–∏"}
//       </button>
//       {error && <p className="error">{error}</p>}

//       <p className="no-account">
//         –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? <Link to="/register">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</Link>
//       </p>
//     </form>
//   );
// };

// export default LoginPage;
